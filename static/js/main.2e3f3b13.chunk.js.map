{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","userInput","setUserInput","health","setHealth","Message","id","message","messageArray","setMessageArray","handleKeyPress","key","keyCode","console","log","userWords","split","totalLetters","forEach","word","wordDict","length","substring","useEffect","document","addEventListener","removeEventListener","className","messages","hasInputField","showSenderName","bubblesCentered","bubbleStyles","text","fontSize","chatbubble","borderRadius","padding","value","max","type","style","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAkEeA,MA5Df,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEeF,mBAAS,MAFxB,mBAENG,EAFM,KAEEC,EAFF,OAG2BJ,mBAAS,CAC/C,IAAIK,UAAQ,CAAEC,GAAI,EAAGC,QAAS,iDAJnB,mBAGNC,EAHM,KAGQC,EAHR,KAOPC,EAAiB,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,QAE5B,GADAC,QAAQC,IAAIH,EAAKC,GACZA,GAAW,IAAMA,GAAW,IAAmB,KAAZA,EACtCV,EAAa,GAAD,OAAID,GAAJ,OAAgBU,SACvB,GAAgB,KAAZC,EAAgB,CACzB,IAAMG,EAAYd,EAAUe,MAAM,KAC9BC,EAAe,EACnBF,EAAUG,SAAQ,SAACC,GACbC,EAASD,KACXF,GAAgBE,EAAKE,WAGzBjB,EAAUD,EAASc,GACnBR,EAAgB,GAAD,mBAAKD,GAAL,CAAmB,IAAIH,UAAQ,CAAEC,GAAI,EAAGC,QAASN,OAChEC,EAAa,SACQ,IAAZU,GAAiBX,EAAUoB,OAAS,GAC7CnB,EAAaD,EAAUqB,UAAU,EAAGrB,EAAUoB,OAAO,KAQzD,OALAE,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWf,GAC9B,kBAAMc,SAASE,oBAAoB,UAAWhB,OAIrD,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,6BAAMxB,GAAU,EAAG,WAAY,IAC/B,6BACA,kBAAC,WAAD,CACEyB,SAAUpB,EACVqB,eAAe,EACfC,gBAAc,EACdC,iBAAiB,EAEjBC,aAAc,CACZC,KAAM,CACJC,SAAU,IAEZC,WAAY,CACVC,aAAc,GACdC,QAAS,QAKf,8BAAUC,MAAOnC,EAAQoC,IAAI,OAC7B,2BAAOC,KAAK,OAAOlC,GAAG,aAAagC,MAAOrC,EAAWwC,MAAO,CAAC,MAAS,QAAS,UAAa,OAAQ,aAAgB,aChDxGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2e3f3b13.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport wordDict from './words_dictionary'\nimport { ChatFeed, Message } from 'react-chat-ui'\n\n\nfunction App() {\n  const [userInput, setUserInput] = useState(\"\");\n  const [health, setHealth] = useState(\"30\");\n  const [messageArray, setMessageArray] = useState([\n    new Message({ id: 1, message: \"So you wish to fight?! How Foolish of you!\" }),\n  ]);\n\n  const handleKeyPress = ({key, keyCode}) => {\n    console.log(key, keyCode)\n    if ((keyCode >= 65 && keyCode <= 90) || keyCode === 32) {  // alphabet or space\n      setUserInput(`${userInput}${key}`)\n    } else if (keyCode === 13) {  // enter\n      const userWords = userInput.split(\" \");\n      let totalLetters = 0;\n      userWords.forEach((word) => {\n        if (wordDict[word]) {\n          totalLetters += word.length;\n        }\n      })\n      setHealth(health - totalLetters);\n      setMessageArray([...messageArray, new Message({ id: 0, message: userInput })]);\n      setUserInput(\"\");\n    } else if (keyCode === 8 && userInput.length > 0) {  // backspace\n      setUserInput(userInput.substring(0, userInput.length-1))\n    }\n  }\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>{health <= 0? \"You Win!\": \"\"}</div>\n        <div>\n        <ChatFeed\n          messages={messageArray} // Boolean: list of message objects\n          hasInputField={false} // Boolean: use our input, or use your own\n          showSenderName // show the name of the user who sent the message\n          bubblesCentered={false} //Boolean should the bubbles be centered in the feed?\n          // JSON: Custom bubble styles\n          bubbleStyles={{\n            text: {\n              fontSize: 15,\n            },\n            chatbubble: {\n              borderRadius: 30,\n              padding: 15\n            }\n          }}\n        />\n        </div>\n        <progress value={health} max=\"30\" />\n        <input type=\"text\" id=\"user-input\" value={userInput} style={{\"width\": \"20rem\", \"marginTop\": \"3rem\", \"borderRadius\": \"1rem\"}} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}